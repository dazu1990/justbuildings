{"version":3,"sources":["underscore.js","mithril.js","main.js"],"names":[],"mappingsgzrEA;AACA;AACA;AACA;AACA","file":"application.min.js","sourcesContent":["//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n",";(function (global, factory) { // eslint-disable-line\n\t\"use strict\"\n\t/* eslint-disable no-undef */\n\tvar m = factory(global)\n\tif (typeof module === \"object\" && module != null && module.exports) {\n\t\tmodule.exports = m\n\t} else if (typeof define === \"function\" && define.amd) {\n\t\tdefine(function () { return m })\n\t} else {\n\t\tglobal.m = m\n\t}\n\t/* eslint-enable no-undef */\n})(typeof window !== \"undefined\" ? window : this, function (global, undefined) { // eslint-disable-line\n\t\"use strict\"\n\n\tm.version = function () {\n\t\treturn \"v0.2.5\"\n\t}\n\n\tvar hasOwn = {}.hasOwnProperty\n\tvar type = {}.toString\n\n\tfunction isFunction(object) {\n\t\treturn typeof object === \"function\"\n\t}\n\n\tfunction isObject(object) {\n\t\treturn type.call(object) === \"[object Object]\"\n\t}\n\n\tfunction isString(object) {\n\t\treturn type.call(object) === \"[object String]\"\n\t}\n\n\tvar isArray = Array.isArray || function (object) {\n\t\treturn type.call(object) === \"[object Array]\"\n\t}\n\n\tfunction noop() {}\n\n\tvar voidElements = {\n\t\tAREA: 1,\n\t\tBASE: 1,\n\t\tBR: 1,\n\t\tCOL: 1,\n\t\tCOMMAND: 1,\n\t\tEMBED: 1,\n\t\tHR: 1,\n\t\tIMG: 1,\n\t\tINPUT: 1,\n\t\tKEYGEN: 1,\n\t\tLINK: 1,\n\t\tMETA: 1,\n\t\tPARAM: 1,\n\t\tSOURCE: 1,\n\t\tTRACK: 1,\n\t\tWBR: 1\n\t}\n\n\t// caching commonly used variables\n\tvar $document, $location, $requestAnimationFrame, $cancelAnimationFrame\n\n\t// self invoking function needed because of the way mocks work\n\tfunction initialize(mock) {\n\t\t$document = mock.document\n\t\t$location = mock.location\n\t\t$cancelAnimationFrame = mock.cancelAnimationFrame || mock.clearTimeout\n\t\t$requestAnimationFrame = mock.requestAnimationFrame || mock.setTimeout\n\t}\n\n\t// testing API\n\tm.deps = function (mock) {\n\t\tinitialize(global = mock || window)\n\t\treturn global\n\t}\n\n\tm.deps(global)\n\n\t/**\n\t * @typedef {String} Tag\n\t * A string that looks like -> div.classname#id[param=one][param2=two]\n\t * Which describes a DOM node\n\t */\n\n\tfunction parseTagAttrs(cell, tag) {\n\t\tvar classes = []\n\t\tvar parser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[.+?\\])/g\n\t\tvar match\n\n\t\twhile ((match = parser.exec(tag))) {\n\t\t\tif (match[1] === \"\" && match[2]) {\n\t\t\t\tcell.tag = match[2]\n\t\t\t} else if (match[1] === \"#\") {\n\t\t\t\tcell.attrs.id = match[2]\n\t\t\t} else if (match[1] === \".\") {\n\t\t\t\tclasses.push(match[2])\n\t\t\t} else if (match[3][0] === \"[\") {\n\t\t\t\tvar pair = /\\[(.+?)(?:=(\"|'|)(.*?)\\2)?\\]/.exec(match[3])\n\t\t\t\tcell.attrs[pair[1]] = pair[3] || \"\"\n\t\t\t}\n\t\t}\n\n\t\treturn classes\n\t}\n\n\tfunction getVirtualChildren(args, hasAttrs) {\n\t\tvar children = hasAttrs ? args.slice(1) : args\n\n\t\tif (children.length === 1 && isArray(children[0])) {\n\t\t\treturn children[0]\n\t\t} else {\n\t\t\treturn children\n\t\t}\n\t}\n\n\tfunction assignAttrs(target, attrs, classes) {\n\t\tvar classAttr = \"class\" in attrs ? \"class\" : \"className\"\n\n\t\tfor (var attrName in attrs) {\n\t\t\tif (hasOwn.call(attrs, attrName)) {\n\t\t\t\tif (attrName === classAttr &&\n\t\t\t\t\t\tattrs[attrName] != null &&\n\t\t\t\t\t\tattrs[attrName] !== \"\") {\n\t\t\t\t\tclasses.push(attrs[attrName])\n\t\t\t\t\t// create key in correct iteration order\n\t\t\t\t\ttarget[attrName] = \"\"\n\t\t\t\t} else {\n\t\t\t\t\ttarget[attrName] = attrs[attrName]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classes.length) target[classAttr] = classes.join(\" \")\n\t}\n\n\t/**\n\t *\n\t * @param {Tag} The DOM node tag\n\t * @param {Object=[]} optional key-value pairs to be mapped to DOM attrs\n\t * @param {...mNode=[]} Zero or more Mithril child nodes. Can be an array,\n\t *                      or splat (optional)\n\t */\n\tfunction m(tag, pairs) {\n\t\tvar args = []\n\n\t\tfor (var i = 1, length = arguments.length; i < length; i++) {\n\t\t\targs[i - 1] = arguments[i]\n\t\t}\n\n\t\tif (isObject(tag)) return parameterize(tag, args)\n\n\t\tif (!isString(tag)) {\n\t\t\tthrow new Error(\"selector in m(selector, attrs, children) should \" +\n\t\t\t\t\"be a string\")\n\t\t}\n\n\t\tvar hasAttrs = pairs != null && isObject(pairs) &&\n\t\t\t!(\"tag\" in pairs || \"view\" in pairs || \"subtree\" in pairs)\n\n\t\tvar attrs = hasAttrs ? pairs : {}\n\t\tvar cell = {\n\t\t\ttag: \"div\",\n\t\t\tattrs: {},\n\t\t\tchildren: getVirtualChildren(args, hasAttrs)\n\t\t}\n\n\t\tassignAttrs(cell.attrs, attrs, parseTagAttrs(cell, tag))\n\t\treturn cell\n\t}\n\n\tfunction forEach(list, f) {\n\t\tfor (var i = 0; i < list.length && !f(list[i], i++);) {\n\t\t\t// function called in condition\n\t\t}\n\t}\n\n\tfunction forKeys(list, f) {\n\t\tforEach(list, function (attrs, i) {\n\t\t\treturn (attrs = attrs && attrs.attrs) &&\n\t\t\t\tattrs.key != null &&\n\t\t\t\tf(attrs, i)\n\t\t})\n\t}\n\t// This function was causing deopts in Chrome.\n\tfunction dataToString(data) {\n\t\t// data.toString() might throw or return null if data is the return\n\t\t// value of Console.log in some versions of Firefox (behavior depends on\n\t\t// version)\n\t\ttry {\n\t\t\tif (data != null && data.toString() != null) return data\n\t\t} catch (e) {\n\t\t\t// silently ignore errors\n\t\t}\n\t\treturn \"\"\n\t}\n\n\t// This function was causing deopts in Chrome.\n\tfunction injectTextNode(parentElement, first, index, data) {\n\t\ttry {\n\t\t\tinsertNode(parentElement, first, index)\n\t\t\tfirst.nodeValue = data\n\t\t} catch (e) {\n\t\t\t// IE erroneously throws error when appending an empty text node\n\t\t\t// after a null\n\t\t}\n\t}\n\n\tfunction flatten(list) {\n\t\t// recursively flatten array\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tif (isArray(list[i])) {\n\t\t\t\tlist = list.concat.apply([], list)\n\t\t\t\t// check current index again and flatten until there are no more\n\t\t\t\t// nested arrays at that index\n\t\t\t\ti--\n\t\t\t}\n\t\t}\n\t\treturn list\n\t}\n\n\tfunction insertNode(parentElement, node, index) {\n\t\tparentElement.insertBefore(node,\n\t\t\tparentElement.childNodes[index] || null)\n\t}\n\n\tvar DELETION = 1\n\tvar INSERTION = 2\n\tvar MOVE = 3\n\n\tfunction handleKeysDiffer(data, existing, cached, parentElement) {\n\t\tforKeys(data, function (key, i) {\n\t\t\texisting[key = key.key] = existing[key] ? {\n\t\t\t\taction: MOVE,\n\t\t\t\tindex: i,\n\t\t\t\tfrom: existing[key].index,\n\t\t\t\telement: cached.nodes[existing[key].index] ||\n\t\t\t\t\t$document.createElement(\"div\")\n\t\t\t} : {action: INSERTION, index: i}\n\t\t})\n\n\t\tvar actions = []\n\t\tfor (var prop in existing) {\n\t\t\tif (hasOwn.call(existing, prop)) {\n\t\t\t\tactions.push(existing[prop])\n\t\t\t}\n\t\t}\n\n\t\tvar changes = actions.sort(sortChanges)\n\t\tvar newCached = new Array(cached.length)\n\n\t\tnewCached.nodes = cached.nodes.slice()\n\n\t\tforEach(changes, function (change) {\n\t\t\tvar index = change.index\n\t\t\tif (change.action === DELETION) {\n\t\t\t\tclear(cached[index].nodes, cached[index])\n\t\t\t\tnewCached.splice(index, 1)\n\t\t\t}\n\t\t\tif (change.action === INSERTION) {\n\t\t\t\tvar dummy = $document.createElement(\"div\")\n\t\t\t\tdummy.key = data[index].attrs.key\n\t\t\t\tinsertNode(parentElement, dummy, index)\n\t\t\t\tnewCached.splice(index, 0, {\n\t\t\t\t\tattrs: {key: data[index].attrs.key},\n\t\t\t\t\tnodes: [dummy]\n\t\t\t\t})\n\t\t\t\tnewCached.nodes[index] = dummy\n\t\t\t}\n\n\t\t\tif (change.action === MOVE) {\n\t\t\t\tvar changeElement = change.element\n\t\t\t\tvar maybeChanged = parentElement.childNodes[index]\n\t\t\t\tif (maybeChanged !== changeElement && changeElement !== null) {\n\t\t\t\t\tparentElement.insertBefore(changeElement,\n\t\t\t\t\t\tmaybeChanged || null)\n\t\t\t\t}\n\t\t\t\tnewCached[index] = cached[change.from]\n\t\t\t\tnewCached.nodes[index] = changeElement\n\t\t\t}\n\t\t})\n\n\t\treturn newCached\n\t}\n\n\tfunction diffKeys(data, cached, existing, parentElement) {\n\t\tvar keysDiffer = data.length !== cached.length\n\n\t\tif (!keysDiffer) {\n\t\t\tforKeys(data, function (attrs, i) {\n\t\t\t\tvar cachedCell = cached[i]\n\t\t\t\treturn keysDiffer = cachedCell &&\n\t\t\t\t\tcachedCell.attrs &&\n\t\t\t\t\tcachedCell.attrs.key !== attrs.key\n\t\t\t})\n\t\t}\n\n\t\tif (keysDiffer) {\n\t\t\treturn handleKeysDiffer(data, existing, cached, parentElement)\n\t\t} else {\n\t\t\treturn cached\n\t\t}\n\t}\n\n\tfunction diffArray(data, cached, nodes) {\n\t\t// diff the array itself\n\n\t\t// update the list of DOM nodes by collecting the nodes from each item\n\t\tforEach(data, function (_, i) {\n\t\t\tif (cached[i] != null) nodes.push.apply(nodes, cached[i].nodes)\n\t\t})\n\t\t// remove items from the end of the array if the new array is shorter\n\t\t// than the old one. if errors ever happen here, the issue is most\n\t\t// likely a bug in the construction of the `cached` data structure\n\t\t// somewhere earlier in the program\n\t\tforEach(cached.nodes, function (node, i) {\n\t\t\tif (node.parentNode != null && nodes.indexOf(node) < 0) {\n\t\t\t\tclear([node], [cached[i]])\n\t\t\t}\n\t\t})\n\n\t\tif (data.length < cached.length) cached.length = data.length\n\t\tcached.nodes = nodes\n\t}\n\n\tfunction buildArrayKeys(data) {\n\t\tvar guid = 0\n\t\tforKeys(data, function () {\n\t\t\tforEach(data, function (attrs) {\n\t\t\t\tif ((attrs = attrs && attrs.attrs) && attrs.key == null) {\n\t\t\t\t\tattrs.key = \"__mithril__\" + guid++\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn 1\n\t\t})\n\t}\n\n\tfunction isDifferentEnough(data, cached, dataAttrKeys) {\n\t\tif (data.tag !== cached.tag) return true\n\n\t\tif (dataAttrKeys.sort().join() !==\n\t\t\t\tObject.keys(cached.attrs).sort().join()) {\n\t\t\treturn true\n\t\t}\n\n\t\tif (data.attrs.id !== cached.attrs.id) {\n\t\t\treturn true\n\t\t}\n\n\t\tif (data.attrs.key !== cached.attrs.key) {\n\t\t\treturn true\n\t\t}\n\n\t\tif (m.redraw.strategy() === \"all\") {\n\t\t\treturn !cached.configContext || cached.configContext.retain !== true\n\t\t}\n\n\t\tif (m.redraw.strategy() === \"diff\") {\n\t\t\treturn cached.configContext && cached.configContext.retain === false\n\t\t}\n\n\t\treturn false\n\t}\n\n\tfunction maybeRecreateObject(data, cached, dataAttrKeys) {\n\t\t// if an element is different enough from the one in cache, recreate it\n\t\tif (isDifferentEnough(data, cached, dataAttrKeys)) {\n\t\t\tif (cached.nodes.length) clear(cached.nodes)\n\n\t\t\tif (cached.configContext &&\n\t\t\t\t\tisFunction(cached.configContext.onunload)) {\n\t\t\t\tcached.configContext.onunload()\n\t\t\t}\n\n\t\t\tif (cached.controllers) {\n\t\t\t\tforEach(cached.controllers, function (controller) {\n\t\t\t\t\tif (controller.onunload) {\n\t\t\t\t\t\tcontroller.onunload({preventDefault: noop})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getObjectNamespace(data, namespace) {\n\t\tif (data.attrs.xmlns) return data.attrs.xmlns\n\t\tif (data.tag === \"svg\") return \"http://www.w3.org/2000/svg\"\n\t\tif (data.tag === \"math\") return \"http://www.w3.org/1998/Math/MathML\"\n\t\treturn namespace\n\t}\n\n\tvar pendingRequests = 0\n\tm.startComputation = function () { pendingRequests++ }\n\tm.endComputation = function () {\n\t\tif (pendingRequests > 1) {\n\t\t\tpendingRequests--\n\t\t} else {\n\t\t\tpendingRequests = 0\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tfunction unloadCachedControllers(cached, views, controllers) {\n\t\tif (controllers.length) {\n\t\t\tcached.views = views\n\t\t\tcached.controllers = controllers\n\t\t\tforEach(controllers, function (controller) {\n\t\t\t\tif (controller.onunload && controller.onunload.$old) {\n\t\t\t\t\tcontroller.onunload = controller.onunload.$old\n\t\t\t\t}\n\n\t\t\t\tif (pendingRequests && controller.onunload) {\n\t\t\t\t\tvar onunload = controller.onunload\n\t\t\t\t\tcontroller.onunload = noop\n\t\t\t\t\tcontroller.onunload.$old = onunload\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction scheduleConfigsToBeCalled(configs, data, node, isNew, cached) {\n\t\t// schedule configs to be called. They are called after `build` finishes\n\t\t// running\n\t\tif (isFunction(data.attrs.config)) {\n\t\t\tvar context = cached.configContext = cached.configContext || {}\n\n\t\t\t// bind\n\t\t\tconfigs.push(function () {\n\t\t\t\treturn data.attrs.config.call(data, node, !isNew, context,\n\t\t\t\t\tcached)\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction buildUpdatedNode(\n\t\tcached,\n\t\tdata,\n\t\teditable,\n\t\thasKeys,\n\t\tnamespace,\n\t\tviews,\n\t\tconfigs,\n\t\tcontrollers\n\t) {\n\t\tvar node = cached.nodes[0]\n\n\t\tif (hasKeys) {\n\t\t\tsetAttributes(node, data.tag, data.attrs, cached.attrs, namespace)\n\t\t}\n\n\t\tcached.children = build(\n\t\t\tnode,\n\t\t\tdata.tag,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tdata.children,\n\t\t\tcached.children,\n\t\t\tfalse,\n\t\t\t0,\n\t\t\tdata.attrs.contenteditable ? node : editable,\n\t\t\tnamespace,\n\t\t\tconfigs\n\t\t)\n\n\t\tcached.nodes.intact = true\n\n\t\tif (controllers.length) {\n\t\t\tcached.views = views\n\t\t\tcached.controllers = controllers\n\t\t}\n\n\t\treturn node\n\t}\n\n\tfunction handleNonexistentNodes(data, parentElement, index) {\n\t\tvar nodes\n\t\tif (data.$trusted) {\n\t\t\tnodes = injectHTML(parentElement, index, data)\n\t\t} else {\n\t\t\tnodes = [$document.createTextNode(data)]\n\t\t\tif (!(parentElement.nodeName in voidElements)) {\n\t\t\t\tinsertNode(parentElement, nodes[0], index)\n\t\t\t}\n\t\t}\n\n\t\tvar cached\n\n\t\tif (typeof data === \"string\" ||\n\t\t\t\ttypeof data === \"number\" ||\n\t\t\t\ttypeof data === \"boolean\") {\n\t\t\tcached = new data.constructor(data)\n\t\t} else {\n\t\t\tcached = data\n\t\t}\n\n\t\tcached.nodes = nodes\n\t\treturn cached\n\t}\n\n\tfunction reattachNodes(\n\t\tdata,\n\t\tcached,\n\t\tparentElement,\n\t\teditable,\n\t\tindex,\n\t\tparentTag\n\t) {\n\t\tvar nodes = cached.nodes\n\t\tif (!editable || editable !== $document.activeElement) {\n\t\t\tif (data.$trusted) {\n\t\t\t\tclear(nodes, cached)\n\t\t\t\tnodes = injectHTML(parentElement, index, data)\n\t\t\t} else if (parentTag === \"textarea\") {\n\t\t\t\t// <textarea> uses `value` instead of `nodeValue`.\n\t\t\t\tparentElement.value = data\n\t\t\t} else if (editable) {\n\t\t\t\t// contenteditable nodes use `innerHTML` instead of `nodeValue`.\n\t\t\t\teditable.innerHTML = data\n\t\t\t} else {\n\t\t\t\t// was a trusted string\n\t\t\t\tif (nodes[0].nodeType === 1 || nodes.length > 1 ||\n\t\t\t\t\t\t(nodes[0].nodeValue.trim &&\n\t\t\t\t\t\t\t!nodes[0].nodeValue.trim())) {\n\t\t\t\t\tclear(cached.nodes, cached)\n\t\t\t\t\tnodes = [$document.createTextNode(data)]\n\t\t\t\t}\n\n\t\t\t\tinjectTextNode(parentElement, nodes[0], index, data)\n\t\t\t}\n\t\t}\n\t\tcached = new data.constructor(data)\n\t\tcached.nodes = nodes\n\t\treturn cached\n\t}\n\n\tfunction handleTextNode(\n\t\tcached,\n\t\tdata,\n\t\tindex,\n\t\tparentElement,\n\t\tshouldReattach,\n\t\teditable,\n\t\tparentTag\n\t) {\n\t\tif (!cached.nodes.length) {\n\t\t\treturn handleNonexistentNodes(data, parentElement, index)\n\t\t} else if (cached.valueOf() !== data.valueOf() || shouldReattach) {\n\t\t\treturn reattachNodes(data, cached, parentElement, editable, index,\n\t\t\t\tparentTag)\n\t\t} else {\n\t\t\treturn (cached.nodes.intact = true, cached)\n\t\t}\n\t}\n\n\tfunction getSubArrayCount(item) {\n\t\tif (item.$trusted) {\n\t\t\t// fix offset of next element if item was a trusted string w/ more\n\t\t\t// than one html element\n\t\t\t// the first clause in the regexp matches elements\n\t\t\t// the second clause (after the pipe) matches text nodes\n\t\t\tvar match = item.match(/<[^\\/]|\\>\\s*[^<]/g)\n\t\t\tif (match != null) return match.length\n\t\t} else if (isArray(item)) {\n\t\t\treturn item.length\n\t\t}\n\t\treturn 1\n\t}\n\n\tfunction buildArray(\n\t\tdata,\n\t\tcached,\n\t\tparentElement,\n\t\tindex,\n\t\tparentTag,\n\t\tshouldReattach,\n\t\teditable,\n\t\tnamespace,\n\t\tconfigs\n\t) {\n\t\tdata = flatten(data)\n\t\tvar nodes = []\n\t\tvar intact = cached.length === data.length\n\t\tvar subArrayCount = 0\n\n\t\t// keys algorithm: sort elements without recreating them if keys are\n\t\t// present\n\t\t//\n\t\t// 1) create a map of all existing keys, and mark all for deletion\n\t\t// 2) add new keys to map and mark them for addition\n\t\t// 3) if key exists in new list, change action from deletion to a move\n\t\t// 4) for each key, handle its corresponding action as marked in\n\t\t//    previous steps\n\n\t\tvar existing = {}\n\t\tvar shouldMaintainIdentities = false\n\n\t\tforKeys(cached, function (attrs, i) {\n\t\t\tshouldMaintainIdentities = true\n\t\t\texisting[cached[i].attrs.key] = {action: DELETION, index: i}\n\t\t})\n\n\t\tbuildArrayKeys(data)\n\t\tif (shouldMaintainIdentities) {\n\t\t\tcached = diffKeys(data, cached, existing, parentElement)\n\t\t}\n\t\t// end key algorithm\n\n\t\tvar cacheCount = 0\n\t\t// faster explicitly written\n\t\tfor (var i = 0, len = data.length; i < len; i++) {\n\t\t\t// diff each item in the array\n\t\t\tvar item = build(\n\t\t\t\tparentElement,\n\t\t\t\tparentTag,\n\t\t\t\tcached,\n\t\t\t\tindex,\n\t\t\t\tdata[i],\n\t\t\t\tcached[cacheCount],\n\t\t\t\tshouldReattach,\n\t\t\t\tindex + subArrayCount || subArrayCount,\n\t\t\t\teditable,\n\t\t\t\tnamespace,\n\t\t\t\tconfigs)\n\n\t\t\tif (item !== undefined) {\n\t\t\t\tintact = intact && item.nodes.intact\n\t\t\t\tsubArrayCount += getSubArrayCount(item)\n\t\t\t\tcached[cacheCount++] = item\n\t\t\t}\n\t\t}\n\n\t\tif (!intact) diffArray(data, cached, nodes)\n\t\treturn cached\n\t}\n\n\tfunction makeCache(data, cached, index, parentIndex, parentCache) {\n\t\tif (cached != null) {\n\t\t\tif (type.call(cached) === type.call(data)) return cached\n\n\t\t\tif (parentCache && parentCache.nodes) {\n\t\t\t\tvar offset = index - parentIndex\n\t\t\t\tvar end = offset + (isArray(data) ? data : cached.nodes).length\n\t\t\t\tclear(\n\t\t\t\t\tparentCache.nodes.slice(offset, end),\n\t\t\t\t\tparentCache.slice(offset, end))\n\t\t\t} else if (cached.nodes) {\n\t\t\t\tclear(cached.nodes, cached)\n\t\t\t}\n\t\t}\n\n\t\tcached = new data.constructor()\n\t\t// if constructor creates a virtual dom element, use a blank object as\n\t\t// the base cached node instead of copying the virtual el (#277)\n\t\tif (cached.tag) cached = {}\n\t\tcached.nodes = []\n\t\treturn cached\n\t}\n\n\tfunction constructNode(data, namespace) {\n\t\tif (data.attrs.is) {\n\t\t\tif (namespace == null) {\n\t\t\t\treturn $document.createElement(data.tag, data.attrs.is)\n\t\t\t} else {\n\t\t\t\treturn $document.createElementNS(namespace, data.tag,\n\t\t\t\t\tdata.attrs.is)\n\t\t\t}\n\t\t} else if (namespace == null) {\n\t\t\treturn $document.createElement(data.tag)\n\t\t} else {\n\t\t\treturn $document.createElementNS(namespace, data.tag)\n\t\t}\n\t}\n\n\tfunction constructAttrs(data, node, namespace, hasKeys) {\n\t\tif (hasKeys) {\n\t\t\treturn setAttributes(node, data.tag, data.attrs, {}, namespace)\n\t\t} else {\n\t\t\treturn data.attrs\n\t\t}\n\t}\n\n\tfunction constructChildren(\n\t\tdata,\n\t\tnode,\n\t\tcached,\n\t\teditable,\n\t\tnamespace,\n\t\tconfigs\n\t) {\n\t\tif (data.children != null && data.children.length > 0) {\n\t\t\treturn build(\n\t\t\t\tnode,\n\t\t\t\tdata.tag,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tdata.children,\n\t\t\t\tcached.children,\n\t\t\t\ttrue,\n\t\t\t\t0,\n\t\t\t\tdata.attrs.contenteditable ? node : editable,\n\t\t\t\tnamespace,\n\t\t\t\tconfigs)\n\t\t} else {\n\t\t\treturn data.children\n\t\t}\n\t}\n\n\tfunction reconstructCached(\n\t\tdata,\n\t\tattrs,\n\t\tchildren,\n\t\tnode,\n\t\tnamespace,\n\t\tviews,\n\t\tcontrollers\n\t) {\n\t\tvar cached = {\n\t\t\ttag: data.tag,\n\t\t\tattrs: attrs,\n\t\t\tchildren: children,\n\t\t\tnodes: [node]\n\t\t}\n\n\t\tunloadCachedControllers(cached, views, controllers)\n\n\t\tif (cached.children && !cached.children.nodes) {\n\t\t\tcached.children.nodes = []\n\t\t}\n\n\t\t// edge case: setting value on <select> doesn't work before children\n\t\t// exist, so set it again after children have been created\n\t\tif (data.tag === \"select\" && \"value\" in data.attrs) {\n\t\t\tsetAttributes(node, data.tag, {value: data.attrs.value}, {},\n\t\t\t\tnamespace)\n\t\t}\n\n\t\treturn cached\n\t}\n\n\tfunction getController(views, view, cachedControllers, controller) {\n\t\tvar controllerIndex\n\n\t\tif (m.redraw.strategy() === \"diff\" && views) {\n\t\t\tcontrollerIndex = views.indexOf(view)\n\t\t} else {\n\t\t\tcontrollerIndex = -1\n\t\t}\n\n\t\tif (controllerIndex > -1) {\n\t\t\treturn cachedControllers[controllerIndex]\n\t\t} else if (isFunction(controller)) {\n\t\t\treturn new controller()\n\t\t} else {\n\t\t\treturn {}\n\t\t}\n\t}\n\n\tvar unloaders = []\n\n\tfunction updateLists(views, controllers, view, controller) {\n\t\tif (controller.onunload != null &&\n\t\t\t\tunloaders.map(function (u) { return u.handler })\n\t\t\t\t\t.indexOf(controller.onunload) < 0) {\n\t\t\tunloaders.push({\n\t\t\t\tcontroller: controller,\n\t\t\t\thandler: controller.onunload\n\t\t\t})\n\t\t}\n\n\t\tviews.push(view)\n\t\tcontrollers.push(controller)\n\t}\n\n\tvar forcing = false\n\tfunction checkView(\n\t\tdata,\n\t\tview,\n\t\tcached,\n\t\tcachedControllers,\n\t\tcontrollers,\n\t\tviews\n\t) {\n\t\tvar controller = getController(\n\t\t\tcached.views,\n\t\t\tview,\n\t\t\tcachedControllers,\n\t\t\tdata.controller)\n\n\t\tvar key = data && data.attrs && data.attrs.key\n\n\t\tif (pendingRequests === 0 ||\n\t\t\t\tforcing ||\n\t\t\t\tcachedControllers &&\n\t\t\t\t\tcachedControllers.indexOf(controller) > -1) {\n\t\t\tdata = data.view(controller)\n\t\t} else {\n\t\t\tdata = {tag: \"placeholder\"}\n\t\t}\n\n\t\tif (data.subtree === \"retain\") return data\n\t\tdata.attrs = data.attrs || {}\n\t\tdata.attrs.key = key\n\t\tupdateLists(views, controllers, view, controller)\n\t\treturn data\n\t}\n\n\tfunction markViews(data, cached, views, controllers) {\n\t\tvar cachedControllers = cached && cached.controllers\n\n\t\twhile (data.view != null) {\n\t\t\tdata = checkView(\n\t\t\t\tdata,\n\t\t\t\tdata.view.$original || data.view,\n\t\t\t\tcached,\n\t\t\t\tcachedControllers,\n\t\t\t\tcontrollers,\n\t\t\t\tviews)\n\t\t}\n\n\t\treturn data\n\t}\n\n\tfunction buildObject( // eslint-disable-line max-statements\n\t\tdata,\n\t\tcached,\n\t\teditable,\n\t\tparentElement,\n\t\tindex,\n\t\tshouldReattach,\n\t\tnamespace,\n\t\tconfigs\n\t) {\n\t\tvar views = []\n\t\tvar controllers = []\n\n\t\tdata = markViews(data, cached, views, controllers)\n\n\t\tif (data.subtree === \"retain\") return cached\n\n\t\tif (!data.tag && controllers.length) {\n\t\t\tthrow new Error(\"Component template must return a virtual \" +\n\t\t\t\t\"element, not an array, string, etc.\")\n\t\t}\n\n\t\tdata.attrs = data.attrs || {}\n\t\tcached.attrs = cached.attrs || {}\n\n\t\tvar dataAttrKeys = Object.keys(data.attrs)\n\t\tvar hasKeys = dataAttrKeys.length > (\"key\" in data.attrs ? 1 : 0)\n\n\t\tmaybeRecreateObject(data, cached, dataAttrKeys)\n\n\t\tif (!isString(data.tag)) return\n\n\t\tvar isNew = cached.nodes.length === 0\n\n\t\tnamespace = getObjectNamespace(data, namespace)\n\n\t\tvar node\n\t\tif (isNew) {\n\t\t\tnode = constructNode(data, namespace)\n\t\t\t// set attributes first, then create children\n\t\t\tvar attrs = constructAttrs(data, node, namespace, hasKeys)\n\n\t\t\t// add the node to its parent before attaching children to it\n\t\t\tinsertNode(parentElement, node, index)\n\n\t\t\tvar children = constructChildren(data, node, cached, editable,\n\t\t\t\tnamespace, configs)\n\n\t\t\tcached = reconstructCached(\n\t\t\t\tdata,\n\t\t\t\tattrs,\n\t\t\t\tchildren,\n\t\t\t\tnode,\n\t\t\t\tnamespace,\n\t\t\t\tviews,\n\t\t\t\tcontrollers)\n\t\t} else {\n\t\t\tnode = buildUpdatedNode(\n\t\t\t\tcached,\n\t\t\t\tdata,\n\t\t\t\teditable,\n\t\t\t\thasKeys,\n\t\t\t\tnamespace,\n\t\t\t\tviews,\n\t\t\t\tconfigs,\n\t\t\t\tcontrollers)\n\t\t}\n\n\t\tif (!isNew && shouldReattach === true && node != null) {\n\t\t\tinsertNode(parentElement, node, index)\n\t\t}\n\n\t\t// The configs are called after `build` finishes running\n\t\tscheduleConfigsToBeCalled(configs, data, node, isNew, cached)\n\n\t\treturn cached\n\t}\n\n\tfunction build(\n\t\tparentElement,\n\t\tparentTag,\n\t\tparentCache,\n\t\tparentIndex,\n\t\tdata,\n\t\tcached,\n\t\tshouldReattach,\n\t\tindex,\n\t\teditable,\n\t\tnamespace,\n\t\tconfigs\n\t) {\n\t\t/*\n\t\t * `build` is a recursive function that manages creation/diffing/removal\n\t\t * of DOM elements based on comparison between `data` and `cached` the\n\t\t * diff algorithm can be summarized as this:\n\t\t *\n\t\t * 1 - compare `data` and `cached`\n\t\t * 2 - if they are different, copy `data` to `cached` and update the DOM\n\t\t *     based on what the difference is\n\t\t * 3 - recursively apply this algorithm for every array and for the\n\t\t *     children of every virtual element\n\t\t *\n\t\t * The `cached` data structure is essentially the same as the previous\n\t\t * redraw's `data` data structure, with a few additions:\n\t\t * - `cached` always has a property called `nodes`, which is a list of\n\t\t *    DOM elements that correspond to the data represented by the\n\t\t *    respective virtual element\n\t\t * - in order to support attaching `nodes` as a property of `cached`,\n\t\t *    `cached` is *always* a non-primitive object, i.e. if the data was\n\t\t *    a string, then cached is a String instance. If data was `null` or\n\t\t *    `undefined`, cached is `new String(\"\")`\n\t\t * - `cached also has a `configContext` property, which is the state\n\t\t *    storage object exposed by config(element, isInitialized, context)\n\t\t * - when `cached` is an Object, it represents a virtual element; when\n\t\t *    it's an Array, it represents a list of elements; when it's a\n\t\t *    String, Number or Boolean, it represents a text node\n\t\t *\n\t\t * `parentElement` is a DOM element used for W3C DOM API calls\n\t\t * `parentTag` is only used for handling a corner case for textarea\n\t\t * values\n\t\t * `parentCache` is used to remove nodes in some multi-node cases\n\t\t * `parentIndex` and `index` are used to figure out the offset of nodes.\n\t\t * They're artifacts from before arrays started being flattened and are\n\t\t * likely refactorable\n\t\t * `data` and `cached` are, respectively, the new and old nodes being\n\t\t * diffed\n\t\t * `shouldReattach` is a flag indicating whether a parent node was\n\t\t * recreated (if so, and if this node is reused, then this node must\n\t\t * reattach itself to the new parent)\n\t\t * `editable` is a flag that indicates whether an ancestor is\n\t\t * contenteditable\n\t\t * `namespace` indicates the closest HTML namespace as it cascades down\n\t\t * from an ancestor\n\t\t * `configs` is a list of config functions to run after the topmost\n\t\t * `build` call finishes running\n\t\t *\n\t\t * there's logic that relies on the assumption that null and undefined\n\t\t * data are equivalent to empty strings\n\t\t * - this prevents lifecycle surprises from procedural helpers that mix\n\t\t *   implicit and explicit return statements (e.g.\n\t\t *   function foo() {if (cond) return m(\"div\")}\n\t\t * - it simplifies diffing code\n\t\t */\n\t\tdata = dataToString(data)\n\t\tif (data.subtree === \"retain\") return cached\n\t\tcached = makeCache(data, cached, index, parentIndex, parentCache)\n\n\t\tif (isArray(data)) {\n\t\t\treturn buildArray(\n\t\t\t\tdata,\n\t\t\t\tcached,\n\t\t\t\tparentElement,\n\t\t\t\tindex,\n\t\t\t\tparentTag,\n\t\t\t\tshouldReattach,\n\t\t\t\teditable,\n\t\t\t\tnamespace,\n\t\t\t\tconfigs)\n\t\t} else if (data != null && isObject(data)) {\n\t\t\treturn buildObject(\n\t\t\t\tdata,\n\t\t\t\tcached,\n\t\t\t\teditable,\n\t\t\t\tparentElement,\n\t\t\t\tindex,\n\t\t\t\tshouldReattach,\n\t\t\t\tnamespace,\n\t\t\t\tconfigs)\n\t\t} else if (!isFunction(data)) {\n\t\t\treturn handleTextNode(\n\t\t\t\tcached,\n\t\t\t\tdata,\n\t\t\t\tindex,\n\t\t\t\tparentElement,\n\t\t\t\tshouldReattach,\n\t\t\t\teditable,\n\t\t\t\tparentTag)\n\t\t} else {\n\t\t\treturn cached\n\t\t}\n\t}\n\n\tfunction sortChanges(a, b) {\n\t\treturn a.action - b.action || a.index - b.index\n\t}\n\n\tfunction copyStyleAttrs(node, dataAttr, cachedAttr) {\n\t\tfor (var rule in dataAttr) {\n\t\t\tif (hasOwn.call(dataAttr, rule)) {\n\t\t\t\tif (cachedAttr == null || cachedAttr[rule] !== dataAttr[rule]) {\n\t\t\t\t\tnode.style[rule] = dataAttr[rule]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (rule in cachedAttr) {\n\t\t\tif (hasOwn.call(cachedAttr, rule)) {\n\t\t\t\tif (!hasOwn.call(dataAttr, rule)) node.style[rule] = \"\"\n\t\t\t}\n\t\t}\n\t}\n\n\tvar shouldUseSetAttribute = {\n\t\tlist: 1,\n\t\tstyle: 1,\n\t\tform: 1,\n\t\ttype: 1,\n\t\twidth: 1,\n\t\theight: 1\n\t}\n\n\tfunction setSingleAttr(\n\t\tnode,\n\t\tattrName,\n\t\tdataAttr,\n\t\tcachedAttr,\n\t\ttag,\n\t\tnamespace\n\t) {\n\t\tif (attrName === \"config\" || attrName === \"key\") {\n\t\t\t// `config` isn't a real attribute, so ignore it\n\t\t\treturn true\n\t\t} else if (isFunction(dataAttr) && attrName.slice(0, 2) === \"on\") {\n\t\t\t// hook event handlers to the auto-redrawing system\n\t\t\tnode[attrName] = autoredraw(dataAttr, node)\n\t\t} else if (attrName === \"style\" && dataAttr != null &&\n\t\t\t\tisObject(dataAttr)) {\n\t\t\t// handle `style: {...}`\n\t\t\tcopyStyleAttrs(node, dataAttr, cachedAttr)\n\t\t} else if (namespace != null) {\n\t\t\t// handle SVG\n\t\t\tif (attrName === \"href\") {\n\t\t\t\tnode.setAttributeNS(\"http://www.w3.org/1999/xlink\",\n\t\t\t\t\t\"href\", dataAttr)\n\t\t\t} else {\n\t\t\t\tnode.setAttribute(\n\t\t\t\t\tattrName === \"className\" ? \"class\" : attrName,\n\t\t\t\t\tdataAttr)\n\t\t\t}\n\t\t} else if (attrName in node && !shouldUseSetAttribute[attrName]) {\n\t\t\t// handle cases that are properties (but ignore cases where we\n\t\t\t// should use setAttribute instead)\n\t\t\t//\n\t\t\t// - list and form are typically used as strings, but are DOM\n\t\t\t//   element references in js\n\t\t\t//\n\t\t\t// - when using CSS selectors (e.g. `m(\"[style='']\")`), style is\n\t\t\t//   used as a string, but it's an object in js\n\t\t\t//\n\t\t\t// #348 don't set the value if not needed - otherwise, cursor\n\t\t\t// placement breaks in Chrome\n\t\t\ttry {\n\t\t\t\tif (tag !== \"input\" || node[attrName] !== dataAttr) {\n\t\t\t\t\tnode[attrName] = dataAttr\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tnode.setAttribute(attrName, dataAttr)\n\t\t\t}\n\t\t}\n\t\telse node.setAttribute(attrName, dataAttr)\n\t}\n\n\tfunction trySetAttr(\n\t\tnode,\n\t\tattrName,\n\t\tdataAttr,\n\t\tcachedAttr,\n\t\tcachedAttrs,\n\t\ttag,\n\t\tnamespace\n\t) {\n\t\tif (!(attrName in cachedAttrs) || (cachedAttr !== dataAttr) || ($document.activeElement === node)) {\n\t\t\tcachedAttrs[attrName] = dataAttr\n\t\t\ttry {\n\t\t\t\treturn setSingleAttr(\n\t\t\t\t\tnode,\n\t\t\t\t\tattrName,\n\t\t\t\t\tdataAttr,\n\t\t\t\t\tcachedAttr,\n\t\t\t\t\ttag,\n\t\t\t\t\tnamespace)\n\t\t\t} catch (e) {\n\t\t\t\t// swallow IE's invalid argument errors to mimic HTML's\n\t\t\t\t// fallback-to-doing-nothing-on-invalid-attributes behavior\n\t\t\t\tif (e.message.indexOf(\"Invalid argument\") < 0) throw e\n\t\t\t}\n\t\t} else if (attrName === \"value\" && tag === \"input\" &&\n\t\t\t\tnode.value !== dataAttr) {\n\t\t\t// #348 dataAttr may not be a string, so use loose comparison\n\t\t\tnode.value = dataAttr\n\t\t}\n\t}\n\n\tfunction setAttributes(node, tag, dataAttrs, cachedAttrs, namespace) {\n\t\tfor (var attrName in dataAttrs) {\n\t\t\tif (hasOwn.call(dataAttrs, attrName)) {\n\t\t\t\tif (trySetAttr(\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tattrName,\n\t\t\t\t\t\tdataAttrs[attrName],\n\t\t\t\t\t\tcachedAttrs[attrName],\n\t\t\t\t\t\tcachedAttrs,\n\t\t\t\t\t\ttag,\n\t\t\t\t\t\tnamespace)) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cachedAttrs\n\t}\n\n\tfunction clear(nodes, cached) {\n\t\tfor (var i = nodes.length - 1; i > -1; i--) {\n\t\t\tif (nodes[i] && nodes[i].parentNode) {\n\t\t\t\ttry {\n\t\t\t\t\tnodes[i].parentNode.removeChild(nodes[i])\n\t\t\t\t} catch (e) {\n\t\t\t\t\t/* eslint-disable max-len */\n\t\t\t\t\t// ignore if this fails due to order of events (see\n\t\t\t\t\t// http://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node)\n\t\t\t\t\t/* eslint-enable max-len */\n\t\t\t\t}\n\t\t\t\tcached = [].concat(cached)\n\t\t\t\tif (cached[i]) unload(cached[i])\n\t\t\t}\n\t\t}\n\t\t// release memory if nodes is an array. This check should fail if nodes\n\t\t// is a NodeList (see loop above)\n\t\tif (nodes.length) {\n\t\t\tnodes.length = 0\n\t\t}\n\t}\n\n\tfunction unload(cached) {\n\t\tif (cached.configContext && isFunction(cached.configContext.onunload)) {\n\t\t\tcached.configContext.onunload()\n\t\t\tcached.configContext.onunload = null\n\t\t}\n\t\tif (cached.controllers) {\n\t\t\tforEach(cached.controllers, function (controller) {\n\t\t\t\tif (isFunction(controller.onunload)) {\n\t\t\t\t\tcontroller.onunload({preventDefault: noop})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tif (cached.children) {\n\t\t\tif (isArray(cached.children)) forEach(cached.children, unload)\n\t\t\telse if (cached.children.tag) unload(cached.children)\n\t\t}\n\t}\n\n\tfunction appendTextFragment(parentElement, data) {\n\t\ttry {\n\t\t\tparentElement.appendChild(\n\t\t\t\t$document.createRange().createContextualFragment(data))\n\t\t} catch (e) {\n\t\t\tparentElement.insertAdjacentHTML(\"beforeend\", data)\n\t\t\treplaceScriptNodes(parentElement)\n\t\t}\n\t}\n\n\t// Replace script tags inside given DOM element with executable ones.\n\t// Will also check children recursively and replace any found script\n\t// tags in same manner.\n\tfunction replaceScriptNodes(node) {\n\t\tif (node.tagName === \"SCRIPT\") {\n\t\t\tnode.parentNode.replaceChild(buildExecutableNode(node), node)\n\t\t} else {\n\t\t\tvar children = node.childNodes\n\t\t\tif (children && children.length) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\treplaceScriptNodes(children[i])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn node\n\t}\n\n\t// Replace script element with one whose contents are executable.\n\tfunction buildExecutableNode(node){\n\t\tvar scriptEl = document.createElement(\"script\")\n\t\tvar attrs = node.attributes\n\n\t\tfor (var i = 0; i < attrs.length; i++) {\n\t\t\tscriptEl.setAttribute(attrs[i].name, attrs[i].value)\n\t\t}\n\n\t\tscriptEl.text = node.innerHTML\n\t\treturn scriptEl\n\t}\n\n\tfunction injectHTML(parentElement, index, data) {\n\t\tvar nextSibling = parentElement.childNodes[index]\n\t\tif (nextSibling) {\n\t\t\tvar isElement = nextSibling.nodeType !== 1\n\t\t\tvar placeholder = $document.createElement(\"span\")\n\t\t\tif (isElement) {\n\t\t\t\tparentElement.insertBefore(placeholder, nextSibling || null)\n\t\t\t\tplaceholder.insertAdjacentHTML(\"beforebegin\", data)\n\t\t\t\tparentElement.removeChild(placeholder)\n\t\t\t} else {\n\t\t\t\tnextSibling.insertAdjacentHTML(\"beforebegin\", data)\n\t\t\t}\n\t\t} else {\n\t\t\tappendTextFragment(parentElement, data)\n\t\t}\n\n\t\tvar nodes = []\n\n\t\twhile (parentElement.childNodes[index] !== nextSibling) {\n\t\t\tnodes.push(parentElement.childNodes[index])\n\t\t\tindex++\n\t\t}\n\n\t\treturn nodes\n\t}\n\n\tfunction autoredraw(callback, object) {\n\t\treturn function (e) {\n\t\t\te = e || event\n\t\t\tm.redraw.strategy(\"diff\")\n\t\t\tm.startComputation()\n\t\t\ttry {\n\t\t\t\treturn callback.call(object, e)\n\t\t\t} finally {\n\t\t\t\tendFirstComputation()\n\t\t\t}\n\t\t}\n\t}\n\n\tvar html\n\tvar documentNode = {\n\t\tappendChild: function (node) {\n\t\t\tif (html === undefined) html = $document.createElement(\"html\")\n\t\t\tif ($document.documentElement &&\n\t\t\t\t\t$document.documentElement !== node) {\n\t\t\t\t$document.replaceChild(node, $document.documentElement)\n\t\t\t} else {\n\t\t\t\t$document.appendChild(node)\n\t\t\t}\n\n\t\t\tthis.childNodes = $document.childNodes\n\t\t},\n\n\t\tinsertBefore: function (node) {\n\t\t\tthis.appendChild(node)\n\t\t},\n\n\t\tchildNodes: []\n\t}\n\n\tvar nodeCache = []\n\tvar cellCache = {}\n\n\tm.render = function (root, cell, forceRecreation) {\n\t\tif (!root) {\n\t\t\tthrow new Error(\"Ensure the DOM element being passed to \" +\n\t\t\t\t\"m.route/m.mount/m.render is not undefined.\")\n\t\t}\n\t\tvar configs = []\n\t\tvar id = getCellCacheKey(root)\n\t\tvar isDocumentRoot = root === $document\n\t\tvar node\n\n\t\tif (isDocumentRoot || root === $document.documentElement) {\n\t\t\tnode = documentNode\n\t\t} else {\n\t\t\tnode = root\n\t\t}\n\n\t\tif (isDocumentRoot && cell.tag !== \"html\") {\n\t\t\tcell = {tag: \"html\", attrs: {}, children: cell}\n\t\t}\n\n\t\tif (cellCache[id] === undefined) clear(node.childNodes)\n\t\tif (forceRecreation === true) reset(root)\n\n\t\tcellCache[id] = build(\n\t\t\tnode,\n\t\t\tnull,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tcell,\n\t\t\tcellCache[id],\n\t\t\tfalse,\n\t\t\t0,\n\t\t\tnull,\n\t\t\tundefined,\n\t\t\tconfigs)\n\n\t\tforEach(configs, function (config) { config() })\n\t}\n\n\tfunction getCellCacheKey(element) {\n\t\tvar index = nodeCache.indexOf(element)\n\t\treturn index < 0 ? nodeCache.push(element) - 1 : index\n\t}\n\n\tm.trust = function (value) {\n\t\tvalue = new String(value) // eslint-disable-line no-new-wrappers\n\t\tvalue.$trusted = true\n\t\treturn value\n\t}\n\n\tfunction gettersetter(store) {\n\t\tfunction prop() {\n\t\t\tif (arguments.length) store = arguments[0]\n\t\t\treturn store\n\t\t}\n\n\t\tprop.toJSON = function () {\n\t\t\treturn store\n\t\t}\n\n\t\treturn prop\n\t}\n\n\tm.prop = function (store) {\n\t\tif ((store != null && (isObject(store) || isFunction(store)) || ((typeof Promise !== \"undefined\") && (store instanceof Promise))) &&\n\t\t\t\tisFunction(store.then)) {\n\t\t\treturn propify(store)\n\t\t}\n\n\t\treturn gettersetter(store)\n\t}\n\n\tvar roots = []\n\tvar components = []\n\tvar controllers = []\n\tvar lastRedrawId = null\n\tvar lastRedrawCallTime = 0\n\tvar computePreRedrawHook = null\n\tvar computePostRedrawHook = null\n\tvar topComponent\n\tvar FRAME_BUDGET = 16 // 60 frames per second = 1 call per 16 ms\n\n\tfunction parameterize(component, args) {\n\t\tfunction controller() {\n\t\t\t/* eslint-disable no-invalid-this */\n\t\t\treturn (component.controller || noop).apply(this, args) || this\n\t\t\t/* eslint-enable no-invalid-this */\n\t\t}\n\n\t\tif (component.controller) {\n\t\t\tcontroller.prototype = component.controller.prototype\n\t\t}\n\n\t\tfunction view(ctrl) {\n\t\t\tvar currentArgs = [ctrl].concat(args)\n\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\tcurrentArgs.push(arguments[i])\n\t\t\t}\n\n\t\t\treturn component.view.apply(component, currentArgs)\n\t\t}\n\n\t\tview.$original = component.view\n\t\tvar output = {controller: controller, view: view}\n\t\tif (args[0] && args[0].key != null) output.attrs = {key: args[0].key}\n\t\treturn output\n\t}\n\n\tm.component = function (component) {\n\t\tvar args = new Array(arguments.length - 1)\n\n\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\targs[i - 1] = arguments[i]\n\t\t}\n\n\t\treturn parameterize(component, args)\n\t}\n\n\tfunction checkPrevented(component, root, index, isPrevented) {\n\t\tif (!isPrevented) {\n\t\t\tm.redraw.strategy(\"all\")\n\t\t\tm.startComputation()\n\t\t\troots[index] = root\n\t\t\tvar currentComponent\n\n\t\t\tif (component) {\n\t\t\t\tcurrentComponent = topComponent = component\n\t\t\t} else {\n\t\t\t\tcurrentComponent = topComponent = component = {controller: noop}\n\t\t\t}\n\n\t\t\tvar controller = new (component.controller || noop)()\n\n\t\t\t// controllers may call m.mount recursively (via m.route redirects,\n\t\t\t// for example)\n\t\t\t// this conditional ensures only the last recursive m.mount call is\n\t\t\t// applied\n\t\t\tif (currentComponent === topComponent) {\n\t\t\t\tcontrollers[index] = controller\n\t\t\t\tcomponents[index] = component\n\t\t\t}\n\t\t\tendFirstComputation()\n\t\t\tif (component === null) {\n\t\t\t\tremoveRootElement(root, index)\n\t\t\t}\n\t\t\treturn controllers[index]\n\t\t} else if (component == null) {\n\t\t\tremoveRootElement(root, index)\n\t\t}\n\t}\n\n\tm.mount = m.module = function (root, component) {\n\t\tif (!root) {\n\t\t\tthrow new Error(\"Please ensure the DOM element exists before \" +\n\t\t\t\t\"rendering a template into it.\")\n\t\t}\n\n\t\tvar index = roots.indexOf(root)\n\t\tif (index < 0) index = roots.length\n\n\t\tvar isPrevented = false\n\t\tvar event = {\n\t\t\tpreventDefault: function () {\n\t\t\t\tisPrevented = true\n\t\t\t\tcomputePreRedrawHook = computePostRedrawHook = null\n\t\t\t}\n\t\t}\n\n\t\tforEach(unloaders, function (unloader) {\n\t\t\tunloader.handler.call(unloader.controller, event)\n\t\t\tunloader.controller.onunload = null\n\t\t})\n\n\t\tif (isPrevented) {\n\t\t\tforEach(unloaders, function (unloader) {\n\t\t\t\tunloader.controller.onunload = unloader.handler\n\t\t\t})\n\t\t} else {\n\t\t\tunloaders = []\n\t\t}\n\n\t\tif (controllers[index] && isFunction(controllers[index].onunload)) {\n\t\t\tcontrollers[index].onunload(event)\n\t\t}\n\n\t\treturn checkPrevented(component, root, index, isPrevented)\n\t}\n\n\tfunction removeRootElement(root, index) {\n\t\troots.splice(index, 1)\n\t\tcontrollers.splice(index, 1)\n\t\tcomponents.splice(index, 1)\n\t\treset(root)\n\t\tnodeCache.splice(getCellCacheKey(root), 1)\n\t}\n\n\tvar redrawing = false\n\tm.redraw = function (force) {\n\t\tif (redrawing) return\n\t\tredrawing = true\n\t\tif (force) forcing = true\n\n\t\ttry {\n\t\t\t// lastRedrawId is a positive number if a second redraw is requested\n\t\t\t// before the next animation frame\n\t\t\t// lastRedrawId is null if it's the first redraw and not an event\n\t\t\t// handler\n\t\t\tif (lastRedrawId && !force) {\n\t\t\t\t// when setTimeout: only reschedule redraw if time between now\n\t\t\t\t// and previous redraw is bigger than a frame, otherwise keep\n\t\t\t\t// currently scheduled timeout\n\t\t\t\t// when rAF: always reschedule redraw\n\t\t\t\tif ($requestAnimationFrame === global.requestAnimationFrame ||\n\t\t\t\t\t\tnew Date() - lastRedrawCallTime > FRAME_BUDGET) {\n\t\t\t\t\tif (lastRedrawId > 0) $cancelAnimationFrame(lastRedrawId)\n\t\t\t\t\tlastRedrawId = $requestAnimationFrame(redraw, FRAME_BUDGET)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tredraw()\n\t\t\t\tlastRedrawId = $requestAnimationFrame(function () {\n\t\t\t\t\tlastRedrawId = null\n\t\t\t\t}, FRAME_BUDGET)\n\t\t\t}\n\t\t} finally {\n\t\t\tredrawing = forcing = false\n\t\t}\n\t}\n\n\tm.redraw.strategy = m.prop()\n\tfunction redraw() {\n\t\tif (computePreRedrawHook) {\n\t\t\tcomputePreRedrawHook()\n\t\t\tcomputePreRedrawHook = null\n\t\t}\n\t\tforEach(roots, function (root, i) {\n\t\t\tvar component = components[i]\n\t\t\tif (controllers[i]) {\n\t\t\t\tvar args = [controllers[i]]\n\t\t\t\tm.render(root,\n\t\t\t\t\tcomponent.view ? component.view(controllers[i], args) : \"\")\n\t\t\t}\n\t\t})\n\t\t// after rendering within a routed context, we need to scroll back to\n\t\t// the top, and fetch the document title for history.pushState\n\t\tif (computePostRedrawHook) {\n\t\t\tcomputePostRedrawHook()\n\t\t\tcomputePostRedrawHook = null\n\t\t}\n\t\tlastRedrawId = null\n\t\tlastRedrawCallTime = new Date()\n\t\tm.redraw.strategy(\"diff\")\n\t}\n\n\tfunction endFirstComputation() {\n\t\tif (m.redraw.strategy() === \"none\") {\n\t\t\tpendingRequests--\n\t\t\tm.redraw.strategy(\"diff\")\n\t\t} else {\n\t\t\tm.endComputation()\n\t\t}\n\t}\n\n\tm.withAttr = function (prop, withAttrCallback, callbackThis) {\n\t\treturn function (e) {\n\t\t\te = e || window.event\n\t\t\t/* eslint-disable no-invalid-this */\n\t\t\tvar currentTarget = e.currentTarget || this\n\t\t\tvar _this = callbackThis || this\n\t\t\t/* eslint-enable no-invalid-this */\n\t\t\tvar target = prop in currentTarget ?\n\t\t\t\tcurrentTarget[prop] :\n\t\t\t\tcurrentTarget.getAttribute(prop)\n\t\t\twithAttrCallback.call(_this, target)\n\t\t}\n\t}\n\n\t// routing\n\tvar modes = {pathname: \"\", hash: \"#\", search: \"?\"}\n\tvar redirect = noop\n\tvar isDefaultRoute = false\n\tvar routeParams, currentRoute\n\n\tm.route = function (root, arg1, arg2, vdom) { // eslint-disable-line\n\t\t// m.route()\n\t\tif (arguments.length === 0) return currentRoute\n\t\t// m.route(el, defaultRoute, routes)\n\t\tif (arguments.length === 3 && isString(arg1)) {\n\t\t\tredirect = function (source) {\n\t\t\t\tvar path = currentRoute = normalizeRoute(source)\n\t\t\t\tif (!routeByValue(root, arg2, path)) {\n\t\t\t\t\tif (isDefaultRoute) {\n\t\t\t\t\t\tthrow new Error(\"Ensure the default route matches \" +\n\t\t\t\t\t\t\t\"one of the routes defined in m.route\")\n\t\t\t\t\t}\n\n\t\t\t\t\tisDefaultRoute = true\n\t\t\t\t\tm.route(arg1, true)\n\t\t\t\t\tisDefaultRoute = false\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar listener = m.route.mode === \"hash\" ?\n\t\t\t\t\"onhashchange\" :\n\t\t\t\t\"onpopstate\"\n\n\t\t\tglobal[listener] = function () {\n\t\t\t\tvar path = $location[m.route.mode]\n\t\t\t\tif (m.route.mode === \"pathname\") path += $location.search\n\t\t\t\tif (currentRoute !== normalizeRoute(path)) redirect(path)\n\t\t\t}\n\n\t\t\tcomputePreRedrawHook = setScroll\n\t\t\tglobal[listener]()\n\n\t\t\treturn\n\t\t}\n\n\t\t// config: m.route\n\t\tif (root.addEventListener || root.attachEvent) {\n\t\t\tvar base = m.route.mode !== \"pathname\" ? $location.pathname : \"\"\n\t\t\troot.href = base + modes[m.route.mode] + vdom.attrs.href\n\t\t\tif (root.addEventListener) {\n\t\t\t\troot.removeEventListener(\"click\", routeUnobtrusive)\n\t\t\t\troot.addEventListener(\"click\", routeUnobtrusive)\n\t\t\t} else {\n\t\t\t\troot.detachEvent(\"onclick\", routeUnobtrusive)\n\t\t\t\troot.attachEvent(\"onclick\", routeUnobtrusive)\n\t\t\t}\n\n\t\t\treturn\n\t\t}\n\t\t// m.route(route, params, shouldReplaceHistoryEntry)\n\t\tif (isString(root)) {\n\t\t\tvar oldRoute = currentRoute\n\t\t\tcurrentRoute = root\n\n\t\t\tvar args = arg1 || {}\n\t\t\tvar queryIndex = currentRoute.indexOf(\"?\")\n\t\t\tvar params\n\n\t\t\tif (queryIndex > -1) {\n\t\t\t\tparams = parseQueryString(currentRoute.slice(queryIndex + 1))\n\t\t\t} else {\n\t\t\t\tparams = {}\n\t\t\t}\n\n\t\t\tfor (var i in args) {\n\t\t\t\tif (hasOwn.call(args, i)) {\n\t\t\t\t\tparams[i] = args[i]\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar querystring = buildQueryString(params)\n\t\t\tvar currentPath\n\n\t\t\tif (queryIndex > -1) {\n\t\t\t\tcurrentPath = currentRoute.slice(0, queryIndex)\n\t\t\t} else {\n\t\t\t\tcurrentPath = currentRoute\n\t\t\t}\n\n\t\t\tif (querystring) {\n\t\t\t\tcurrentRoute = currentPath +\n\t\t\t\t\t(currentPath.indexOf(\"?\") === -1 ? \"?\" : \"&\") +\n\t\t\t\t\tquerystring\n\t\t\t}\n\n\t\t\tvar replaceHistory =\n\t\t\t\t(arguments.length === 3 ? arg2 : arg1) === true ||\n\t\t\t\toldRoute === root\n\n\t\t\tif (global.history.pushState) {\n\t\t\t\tvar method = replaceHistory ? \"replaceState\" : \"pushState\"\n\t\t\t\tcomputePreRedrawHook = setScroll\n\t\t\t\tcomputePostRedrawHook = function () {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tglobal.history[method](null, $document.title,\n\t\t\t\t\t\t\tmodes[m.route.mode] + currentRoute)\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t// In the event of a pushState or replaceState failure,\n\t\t\t\t\t\t// fallback to a standard redirect. This is specifically\n\t\t\t\t\t\t// to address a Safari security error when attempting to\n\t\t\t\t\t\t// call pushState more than 100 times.\n\t\t\t\t\t\t$location[m.route.mode] = currentRoute\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tredirect(modes[m.route.mode] + currentRoute)\n\t\t\t} else {\n\t\t\t\t$location[m.route.mode] = currentRoute\n\t\t\t\tredirect(modes[m.route.mode] + currentRoute)\n\t\t\t}\n\t\t}\n\t}\n\n\tm.route.param = function (key) {\n\t\tif (!routeParams) {\n\t\t\tthrow new Error(\"You must call m.route(element, defaultRoute, \" +\n\t\t\t\t\"routes) before calling m.route.param()\")\n\t\t}\n\n\t\tif (!key) {\n\t\t\treturn routeParams\n\t\t}\n\n\t\treturn routeParams[key]\n\t}\n\n\tm.route.mode = \"search\"\n\n\tfunction normalizeRoute(route) {\n\t\treturn route.slice(modes[m.route.mode].length)\n\t}\n\n\tfunction routeByValue(root, router, path) {\n\t\trouteParams = {}\n\n\t\tvar queryStart = path.indexOf(\"?\")\n\t\tif (queryStart !== -1) {\n\t\t\trouteParams = parseQueryString(\n\t\t\t\tpath.substr(queryStart + 1, path.length))\n\t\t\tpath = path.substr(0, queryStart)\n\t\t}\n\n\t\t// Get all routes and check if there's\n\t\t// an exact match for the current path\n\t\tvar keys = Object.keys(router)\n\t\tvar index = keys.indexOf(path)\n\n\t\tif (index !== -1){\n\t\t\tm.mount(root, router[keys [index]])\n\t\t\treturn true\n\t\t}\n\n\t\tfor (var route in router) {\n\t\t\tif (hasOwn.call(router, route)) {\n\t\t\t\tif (route === path) {\n\t\t\t\t\tm.mount(root, router[route])\n\t\t\t\t\treturn true\n\t\t\t\t}\n\n\t\t\t\tvar matcher = new RegExp(\"^\" + route\n\t\t\t\t\t.replace(/:[^\\/]+?\\.{3}/g, \"(.*?)\")\n\t\t\t\t\t.replace(/:[^\\/]+/g, \"([^\\\\/]+)\") + \"\\/?$\")\n\n\t\t\t\tif (matcher.test(path)) {\n\t\t\t\t\t/* eslint-disable no-loop-func */\n\t\t\t\t\tpath.replace(matcher, function () {\n\t\t\t\t\t\tvar keys = route.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tforEach(keys, function (key, i) {\n\t\t\t\t\t\t\trouteParams[key.replace(/:|\\./g, \"\")] =\n\t\t\t\t\t\t\t\tdecodeURIComponent(values[i])\n\t\t\t\t\t\t})\n\t\t\t\t\t\tm.mount(root, router[route])\n\t\t\t\t\t})\n\t\t\t\t\t/* eslint-enable no-loop-func */\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction routeUnobtrusive(e) {\n\t\te = e || event\n\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\n\t\tif (e.preventDefault) {\n\t\t\te.preventDefault()\n\t\t} else {\n\t\t\te.returnValue = false\n\t\t}\n\n\t\tvar currentTarget = e.currentTarget || e.srcElement\n\t\tvar args\n\n\t\tif (m.route.mode === \"pathname\" && currentTarget.search) {\n\t\t\targs = parseQueryString(currentTarget.search.slice(1))\n\t\t} else {\n\t\t\targs = {}\n\t\t}\n\n\t\twhile (currentTarget && !/a/i.test(currentTarget.nodeName)) {\n\t\t\tcurrentTarget = currentTarget.parentNode\n\t\t}\n\n\t\t// clear pendingRequests because we want an immediate route change\n\t\tpendingRequests = 0\n\t\tm.route(currentTarget[m.route.mode]\n\t\t\t.slice(modes[m.route.mode].length), args)\n\t}\n\n\tfunction setScroll() {\n\t\tif (m.route.mode !== \"hash\" && $location.hash) {\n\t\t\t$location.hash = $location.hash\n\t\t} else {\n\t\t\tglobal.scrollTo(0, 0)\n\t\t}\n\t}\n\n\tfunction buildQueryString(object, prefix) {\n\t\tvar duplicates = {}\n\t\tvar str = []\n\n\t\tfor (var prop in object) {\n\t\t\tif (hasOwn.call(object, prop)) {\n\t\t\t\tvar key = prefix ? prefix + \"[\" + prop + \"]\" : prop\n\t\t\t\tvar value = object[prop]\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\tstr.push(encodeURIComponent(key))\n\t\t\t\t} else if (isObject(value)) {\n\t\t\t\t\tstr.push(buildQueryString(value, key))\n\t\t\t\t} else if (isArray(value)) {\n\t\t\t\t\tvar keys = []\n\t\t\t\t\tduplicates[key] = duplicates[key] || {}\n\t\t\t\t\t/* eslint-disable no-loop-func */\n\t\t\t\t\tforEach(value, function (item) {\n\t\t\t\t\t\t/* eslint-enable no-loop-func */\n\t\t\t\t\t\tif (!duplicates[key][item]) {\n\t\t\t\t\t\t\tduplicates[key][item] = true\n\t\t\t\t\t\t\tkeys.push(encodeURIComponent(key) + \"=\" +\n\t\t\t\t\t\t\t\tencodeURIComponent(item))\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tstr.push(keys.join(\"&\"))\n\t\t\t\t} else if (value !== undefined) {\n\t\t\t\t\tstr.push(encodeURIComponent(key) + \"=\" +\n\t\t\t\t\t\tencodeURIComponent(value))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn str.join(\"&\")\n\t}\n\n\tfunction parseQueryString(str) {\n\t\tif (str === \"\" || str == null) return {}\n\t\tif (str.charAt(0) === \"?\") str = str.slice(1)\n\n\t\tvar pairs = str.split(\"&\")\n\t\tvar params = {}\n\n\t\tforEach(pairs, function (string) {\n\t\t\tvar pair = string.split(\"=\")\n\t\t\tvar key = decodeURIComponent(pair[0])\n\t\t\tvar value = pair.length === 2 ? decodeURIComponent(pair[1]) : null\n\t\t\tif (params[key] != null) {\n\t\t\t\tif (!isArray(params[key])) params[key] = [params[key]]\n\t\t\t\tparams[key].push(value)\n\t\t\t}\n\t\t\telse params[key] = value\n\t\t})\n\n\t\treturn params\n\t}\n\n\tm.route.buildQueryString = buildQueryString\n\tm.route.parseQueryString = parseQueryString\n\n\tfunction reset(root) {\n\t\tvar cacheKey = getCellCacheKey(root)\n\t\tclear(root.childNodes, cellCache[cacheKey])\n\t\tcellCache[cacheKey] = undefined\n\t}\n\n\tm.deferred = function () {\n\t\tvar deferred = new Deferred()\n\t\tdeferred.promise = propify(deferred.promise)\n\t\treturn deferred\n\t}\n\n\tfunction propify(promise, initialValue) {\n\t\tvar prop = m.prop(initialValue)\n\t\tpromise.then(prop)\n\t\tprop.then = function (resolve, reject) {\n\t\t\treturn propify(promise.then(resolve, reject), initialValue)\n\t\t}\n\n\t\tprop.catch = prop.then.bind(null, null)\n\t\treturn prop\n\t}\n\t// Promiz.mithril.js | Zolmeister | MIT\n\t// a modified version of Promiz.js, which does not conform to Promises/A+\n\t// for two reasons:\n\t//\n\t// 1) `then` callbacks are called synchronously (because setTimeout is too\n\t//    slow, and the setImmediate polyfill is too big\n\t//\n\t// 2) throwing subclasses of Error cause the error to be bubbled up instead\n\t//    of triggering rejection (because the spec does not account for the\n\t//    important use case of default browser error handling, i.e. message w/\n\t//    line number)\n\n\tvar RESOLVING = 1\n\tvar REJECTING = 2\n\tvar RESOLVED = 3\n\tvar REJECTED = 4\n\n\tfunction Deferred(onSuccess, onFailure) {\n\t\tvar self = this\n\t\tvar state = 0\n\t\tvar promiseValue = 0\n\t\tvar next = []\n\n\t\tself.promise = {}\n\n\t\tself.resolve = function (value) {\n\t\t\tif (!state) {\n\t\t\t\tpromiseValue = value\n\t\t\t\tstate = RESOLVING\n\n\t\t\t\tfire()\n\t\t\t}\n\n\t\t\treturn self\n\t\t}\n\n\t\tself.reject = function (value) {\n\t\t\tif (!state) {\n\t\t\t\tpromiseValue = value\n\t\t\t\tstate = REJECTING\n\n\t\t\t\tfire()\n\t\t\t}\n\n\t\t\treturn self\n\t\t}\n\n\t\tself.promise.then = function (onSuccess, onFailure) {\n\t\t\tvar deferred = new Deferred(onSuccess, onFailure)\n\n\t\t\tif (state === RESOLVED) {\n\t\t\t\tdeferred.resolve(promiseValue)\n\t\t\t} else if (state === REJECTED) {\n\t\t\t\tdeferred.reject(promiseValue)\n\t\t\t} else {\n\t\t\t\tnext.push(deferred)\n\t\t\t}\n\n\t\t\treturn deferred.promise\n\t\t}\n\n\t\tfunction finish(type) {\n\t\t\tstate = type || REJECTED\n\t\t\tnext.map(function (deferred) {\n\t\t\t\tif (state === RESOLVED) {\n\t\t\t\t\tdeferred.resolve(promiseValue)\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.reject(promiseValue)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tfunction thennable(then, success, failure, notThennable) {\n\t\t\tif (((promiseValue != null && isObject(promiseValue)) ||\n\t\t\t\t\tisFunction(promiseValue)) && isFunction(then)) {\n\t\t\t\ttry {\n\t\t\t\t\t// count protects against abuse calls from spec checker\n\t\t\t\t\tvar count = 0\n\t\t\t\t\tthen.call(promiseValue, function (value) {\n\t\t\t\t\t\tif (count++) return\n\t\t\t\t\t\tpromiseValue = value\n\t\t\t\t\t\tsuccess()\n\t\t\t\t\t}, function (value) {\n\t\t\t\t\t\tif (count++) return\n\t\t\t\t\t\tpromiseValue = value\n\t\t\t\t\t\tfailure()\n\t\t\t\t\t})\n\t\t\t\t} catch (e) {\n\t\t\t\t\tm.deferred.onerror(e)\n\t\t\t\t\tpromiseValue = e\n\t\t\t\t\tfailure()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnotThennable()\n\t\t\t}\n\t\t}\n\n\t\tfunction fire() {\n\t\t\t// check if it's a thenable\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tthen = promiseValue && promiseValue.then\n\t\t\t} catch (e) {\n\t\t\t\tm.deferred.onerror(e)\n\t\t\t\tpromiseValue = e\n\t\t\t\tstate = REJECTING\n\t\t\t\treturn fire()\n\t\t\t}\n\n\t\t\tif (state === REJECTING) {\n\t\t\t\tm.deferred.onerror(promiseValue)\n\t\t\t}\n\n\t\t\tthennable(then, function () {\n\t\t\t\tstate = RESOLVING\n\t\t\t\tfire()\n\t\t\t}, function () {\n\t\t\t\tstate = REJECTING\n\t\t\t\tfire()\n\t\t\t}, function () {\n\t\t\t\ttry {\n\t\t\t\t\tif (state === RESOLVING && isFunction(onSuccess)) {\n\t\t\t\t\t\tpromiseValue = onSuccess(promiseValue)\n\t\t\t\t\t} else if (state === REJECTING && isFunction(onFailure)) {\n\t\t\t\t\t\tpromiseValue = onFailure(promiseValue)\n\t\t\t\t\t\tstate = RESOLVING\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tm.deferred.onerror(e)\n\t\t\t\t\tpromiseValue = e\n\t\t\t\t\treturn finish()\n\t\t\t\t}\n\n\t\t\t\tif (promiseValue === self) {\n\t\t\t\t\tpromiseValue = TypeError()\n\t\t\t\t\tfinish()\n\t\t\t\t} else {\n\t\t\t\t\tthennable(then, function () {\n\t\t\t\t\t\tfinish(RESOLVED)\n\t\t\t\t\t}, finish, function () {\n\t\t\t\t\t\tfinish(state === RESOLVING && RESOLVED)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tm.deferred.onerror = function (e) {\n\t\tif (type.call(e) === \"[object Error]\" &&\n\t\t\t\t!/ Error/.test(e.constructor.toString())) {\n\t\t\tpendingRequests = 0\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tm.sync = function (args) {\n\t\tvar deferred = m.deferred()\n\t\tvar outstanding = args.length\n\t\tvar results = []\n\t\tvar method = \"resolve\"\n\n\t\tfunction synchronizer(pos, resolved) {\n\t\t\treturn function (value) {\n\t\t\t\tresults[pos] = value\n\t\t\t\tif (!resolved) method = \"reject\"\n\t\t\t\tif (--outstanding === 0) {\n\t\t\t\t\tdeferred.promise(results)\n\t\t\t\t\tdeferred[method](results)\n\t\t\t\t}\n\t\t\t\treturn value\n\t\t\t}\n\t\t}\n\n\t\tif (args.length > 0) {\n\t\t\tforEach(args, function (arg, i) {\n\t\t\t\targ.then(synchronizer(i, true), synchronizer(i, false))\n\t\t\t})\n\t\t} else {\n\t\t\tdeferred.resolve([])\n\t\t}\n\n\t\treturn deferred.promise\n\t}\n\n\tfunction identity(value) { return value }\n\n\tfunction handleJsonp(options) {\n\t\tvar callbackKey = options.callbackName || \"mithril_callback_\" +\n\t\t\tnew Date().getTime() + \"_\" +\n\t\t\t(Math.round(Math.random() * 1e16)).toString(36)\n\n\t\tvar script = $document.createElement(\"script\")\n\n\t\tglobal[callbackKey] = function (resp) {\n\t\t\tscript.parentNode.removeChild(script)\n\t\t\toptions.onload({\n\t\t\t\ttype: \"load\",\n\t\t\t\ttarget: {\n\t\t\t\t\tresponseText: resp\n\t\t\t\t}\n\t\t\t})\n\t\t\tglobal[callbackKey] = undefined\n\t\t}\n\n\t\tscript.onerror = function () {\n\t\t\tscript.parentNode.removeChild(script)\n\n\t\t\toptions.onerror({\n\t\t\t\ttype: \"error\",\n\t\t\t\ttarget: {\n\t\t\t\t\tstatus: 500,\n\t\t\t\t\tresponseText: JSON.stringify({\n\t\t\t\t\t\terror: \"Error making jsonp request\"\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\tglobal[callbackKey] = undefined\n\n\t\t\treturn false\n\t\t}\n\n\t\tscript.onload = function () {\n\t\t\treturn false\n\t\t}\n\n\t\tscript.src = options.url +\n\t\t\t(options.url.indexOf(\"?\") > 0 ? \"&\" : \"?\") +\n\t\t\t(options.callbackKey ? options.callbackKey : \"callback\") +\n\t\t\t\"=\" + callbackKey +\n\t\t\t\"&\" + buildQueryString(options.data || {})\n\n\t\t$document.body.appendChild(script)\n\t}\n\n\tfunction createXhr(options) {\n\t\tvar xhr = new global.XMLHttpRequest()\n\t\txhr.open(options.method, options.url, true, options.user,\n\t\t\toptions.password)\n\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\tif (xhr.status >= 200 && xhr.status < 300) {\n\t\t\t\t\toptions.onload({type: \"load\", target: xhr})\n\t\t\t\t} else {\n\t\t\t\t\toptions.onerror({type: \"error\", target: xhr})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (options.serialize === JSON.stringify &&\n\t\t\t\toptions.data &&\n\t\t\t\toptions.method !== \"GET\") {\n\t\t\txhr.setRequestHeader(\"Content-Type\",\n\t\t\t\t\"application/json; charset=utf-8\")\n\t\t}\n\n\t\tif (options.deserialize === JSON.parse) {\n\t\t\txhr.setRequestHeader(\"Accept\", \"application/json, text/*\")\n\t\t}\n\n\t\tif (isFunction(options.config)) {\n\t\t\tvar maybeXhr = options.config(xhr, options)\n\t\t\tif (maybeXhr != null) xhr = maybeXhr\n\t\t}\n\n\t\tvar data = options.method === \"GET\" || !options.data ? \"\" : options.data\n\n\t\tif (data && !isString(data) && data.constructor !== global.FormData) {\n\t\t\tthrow new Error(\"Request data should be either be a string or \" +\n\t\t\t\t\"FormData. Check the `serialize` option in `m.request`\")\n\t\t}\n\n\t\txhr.send(data)\n\t\treturn xhr\n\t}\n\n\tfunction ajax(options) {\n\t\tif (options.dataType && options.dataType.toLowerCase() === \"jsonp\") {\n\t\t\treturn handleJsonp(options)\n\t\t} else {\n\t\t\treturn createXhr(options)\n\t\t}\n\t}\n\n\tfunction bindData(options, data, serialize) {\n\t\tif (options.method === \"GET\" && options.dataType !== \"jsonp\") {\n\t\t\tvar prefix = options.url.indexOf(\"?\") < 0 ? \"?\" : \"&\"\n\t\t\tvar querystring = buildQueryString(data)\n\t\t\toptions.url += (querystring ? prefix + querystring : \"\")\n\t\t} else {\n\t\t\toptions.data = serialize(data)\n\t\t}\n\t}\n\n\tfunction parameterizeUrl(url, data) {\n\t\tif (data) {\n\t\t\turl = url.replace(/:[a-z]\\w+/gi, function (token){\n\t\t\t\tvar key = token.slice(1)\n\t\t\t\tvar value = data[key] || token\n\t\t\t\tdelete data[key]\n\t\t\t\treturn value\n\t\t\t})\n\t\t}\n\t\treturn url\n\t}\n\n\tm.request = function (options) {\n\t\tif (options.background !== true) m.startComputation()\n\t\tvar deferred = new Deferred()\n\t\tvar isJSONP = options.dataType &&\n\t\t\toptions.dataType.toLowerCase() === \"jsonp\"\n\n\t\tvar serialize, deserialize, extract\n\n\t\tif (isJSONP) {\n\t\t\tserialize = options.serialize =\n\t\t\tdeserialize = options.deserialize = identity\n\n\t\t\textract = function (jsonp) { return jsonp.responseText }\n\t\t} else {\n\t\t\tserialize = options.serialize = options.serialize || JSON.stringify\n\n\t\t\tdeserialize = options.deserialize =\n\t\t\t\toptions.deserialize || JSON.parse\n\t\t\textract = options.extract || function (xhr) {\n\t\t\t\tif (xhr.responseText.length || deserialize !== JSON.parse) {\n\t\t\t\t\treturn xhr.responseText\n\t\t\t\t} else {\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\toptions.method = (options.method || \"GET\").toUpperCase()\n\t\toptions.url = parameterizeUrl(options.url, options.data)\n\t\tbindData(options, options.data, serialize)\n\t\toptions.onload = options.onerror = function (ev) {\n\t\t\ttry {\n\t\t\t\tev = ev || event\n\t\t\t\tvar response = deserialize(extract(ev.target, options))\n\t\t\t\tif (ev.type === \"load\") {\n\t\t\t\t\tif (options.unwrapSuccess) {\n\t\t\t\t\t\tresponse = options.unwrapSuccess(response, ev.target)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isArray(response) && options.type) {\n\t\t\t\t\t\tforEach(response, function (res, i) {\n\t\t\t\t\t\t\tresponse[i] = new options.type(res)\n\t\t\t\t\t\t})\n\t\t\t\t\t} else if (options.type) {\n\t\t\t\t\t\tresponse = new options.type(response)\n\t\t\t\t\t}\n\n\t\t\t\t\tdeferred.resolve(response)\n\t\t\t\t} else {\n\t\t\t\t\tif (options.unwrapError) {\n\t\t\t\t\t\tresponse = options.unwrapError(response, ev.target)\n\t\t\t\t\t}\n\n\t\t\t\t\tdeferred.reject(response)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tdeferred.reject(e)\n\t\t\t\tm.deferred.onerror(e)\n\t\t\t} finally {\n\t\t\t\tif (options.background !== true) m.endComputation()\n\t\t\t}\n\t\t}\n\n\t\tajax(options)\n\t\tdeferred.promise = propify(deferred.promise, options.initialValue)\n\t\treturn deferred.promise\n\t}\n\n\treturn m\n}); // eslint-disable-line\n","\n(function(){\n console.log('The main javascript is working',m);\n\n})();"]}